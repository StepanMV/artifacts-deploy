name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        qt_version_major: [5, 6]
        include:
          - os: windows-latest
            qt_version_major: 5
          - os: windows-latest
            qt_version_major: 6
          - os: ubuntu-latest
            qt_version_major: 5
          - os: ubuntu-latest
            qt_version_major: 6

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        if [[ "${{ matrix.qt_version_major }}" == "5" ]]; then
          echo "qt-version=5.15.2" >> "$GITHUB_OUTPUT"
        elif [[ "${{ matrix.qt_version_major }}" == "6" ]]; then
          echo "qt-version=6.2.0" >> "$GITHUB_OUTPUT"
        fi
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo 'generator="MinGW Makefiles"' >> "$GITHUB_OUTPUT"
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          echo 'generator="Unix Makefiles"' >> "$GITHUB_OUTPUT"
        fi

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.qt_version_major }}" == "5" ]]; then
          sudo apt-get install -y qtbase5-dev qtbase5-dev-tools qttools5-dev
        elif [[ "${{ matrix.qt_version_major }}" == "6" ]]; then
          sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-dev qt6-base-dev qt6-tools-dev qt6-base-dev-tools
        fi
        sudo apt-get install -y libssh-dev libzip-dev zipcmp zipmerge ziptool

    - name: Install Qt on Windows
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ steps.strings.outputs.qt-version }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw81'
        dir: '${{ github.workspace }}/Qt/'
        cache: 'false'
        setup-python: 'true'
        set-env: 'true'

    - name: Install libssh and libzip on Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat
        ./vcpkg.exe install libssh
        ./vcpkg.exe install libzip
        echo "${{ github.workspace }}/vcpkg/installed/x64-windows/bin" >> $GITHUB_PATH
        echo "${{ github.workspace }}/vcpkg/installed/x64-windows/include" >> $GITHUB_PATH
        echo "${{ github.workspace }}/vcpkg/installed/x64-windows/lib" >> $GITHUB_PATH
        
    - name: Upload a vcpkg libs for Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4.3.3
      with:
        path: |
          ${{ github.workspace }}\vcpkg\installed\x64-windows\bin\
          ${{ github.workspace }}\vcpkg\installed\x64-windows\include\
          ${{ github.workspace }}\vcpkg\installed\x64-windows\lib\
        if-no-files-found: error
        
    - name: Configure CMake
      shell: bash
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_C_COMPILER=gcc
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DQT_VERSION_MAJOR=${{ matrix.qt_version_major }}
        -G ${{ steps.strings.outputs.generator }}
        -S .

    - name: Build
      shell: bash
      run: cmake --build build --config ${{ matrix.build_type }}
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
        name:
          artifacts-deploy-${{ matrix.os }}-${{ steps.strings.outputs.qt-version }}
        path: 
          ${{ github.workspace }}/build/artifacts-deploy
        if-no-files-found: error
